sourceSets {
    functionalTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    functionalTestImplementation.extendsFrom implementation, testImplementation
    functionalTestRuntimeOnly.extendsFrom runtimeOnly, testRuntimeOnly
}

dependencies {
    functionalTestImplementation 'org.mock-server:mockserver-netty:5.11.2'
}

task functionalTest(type: Test) {
    description = 'Runs the functional tests.'
    group = 'verification'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    mustRunAfter test

    reports {
        html.setDestination project.file("${html.destination}/functional")
        junitXml.setDestination project.file("${junitXml.destination}/functional")
    }
    testLogging {
        showStandardStreams = true
        events 'started', 'passed', 'failed'
    }
}

check.dependsOn functionalTest

gradlePlugin {
    testSourceSets sourceSets.functionalTest
}

